const DBus = require('dbus-next');
const { EventEmitter } = require('events');

/*
 * Generated by dbus-next interface generator
 */

{{#each interfaces}}
/**
 * {{$.name}}
 */
export class {{className $.name}} extends EventEmitter {

    constructor(dbusObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = dbusObject.getInterface('{{$.name}}');
        this.propertiesDBusInterface = dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        this.propertiesDBusInterface.on('PropertiesChanged', (iface, changed, invalidated) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        });
        // forward all signals
        this.on("newListener", this.thisDBusInterface.on.bind(this.thisDBusInterface));
        this.on("removeListener", this.thisDBusInterface.removeListener.bind(this.thisDBusInterface));
    }

    /***** Properties *****/

    getProperties() {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    getProperty(name) {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    setProperty(name, value) {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    {{#each property}}
    //@property({ name: '{{$.name}}', signature: '{{$.type}}', access: {{accessConst $.access}} }){{#ifeq $.access "read"}}
    {{$.name}}() {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, '{{$.name}}');
    }{{/ifeq}}{{#ifeq $.access "write"}}
    {{$.name}}(value) {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, '{{$.name}}', value);
    }{{/ifeq}}{{#ifeq $.access "readwrite"}}
    {{$.name}}(value) {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, '{{$.name}}', value);
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, '{{$.name}}');
        }
    }{{/ifeq}}

    {{/each}}

    /***** Methods *****/

    {{#each method}}
    //@method({ name: '{{$.name}}', inSignature: '{{inSignature arg}}', outSignature: '{{outSignature arg}}' })
    {{$.name}}({{#each arg}}{{#ifeq $.direction "in"}}{{$.name}}{{#unless @last}}, {{/unless}}{{/ifeq}}{{/each}}) {
        return this.thisDBusInterface.{{$.name}}({{#each arg}}{{#ifeq $.direction "in"}}{{$.name}}{{#unless @last}}, {{/unless}}{{/ifeq}}{{/each}});
    }

    {{/each}}


    /***** Signals for {{$.name}} *****/
    {{#each signal}}
    //@signal({ name: '{{$.name}}', signature: '{{signature arg}}' })
    {{/each}}
}

{{/each}}
