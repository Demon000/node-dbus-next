import * as DBus from 'dbus-next';
import { EventEmitter } from 'events';

/*
 * Generated by dbus-next interface generator
 */

{{#each interfaces}}
/**
 * {{$.name}}
 */
export class {{className $.name}} extends EventEmitter {

    public readonly dbusInterfaceName = '{{$.name}}';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = dbusObject.getInterface('{{$.name}}');
        this.propertiesDBusInterface = dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        this.propertiesDBusInterface.on('PropertiesChanged', (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        });
        // forward all signals
        this.on("newListener", this.thisDBusInterface.on.bind(this.thisDBusInterface));
        this.on("removeListener", this.thisDBusInterface.removeListener.bind(this.thisDBusInterface));
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    {{#each property}}
    //@property({ name: '{{$.name}}', signature: '{{$.type}}', access: {{accessConst $.access}} }){{#ifeq $.access "read"}}
    public {{$.name}}(): Promise<{{tsType $.type}}> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, '{{$.name}}');
    }{{/ifeq}}{{#ifeq $.access "write"}}
    public {{$.name}}(value: {{tsType $.type}}): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, '{{$.name}}', value);
    }{{/ifeq}}{{#ifeq $.access "readwrite"}}
    public {{$.name}}(): Promise<{{tsType $.type}}>;
    public {{$.name}}(value: {{tsType $.type}}): Promise<void>;
    public {{$.name}}(value?: {{tsType $.type}}): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, '{{$.name}}', value);
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, '{{$.name}}');
        }
    }{{/ifeq}}

    {{/each}}

    /***** Methods *****/

    {{#each method}}
    //@method({ name: '{{$.name}}', inSignature: '{{inSignature arg}}', outSignature: '{{outSignature arg}}' })
    public {{$.name}}({{#each arg}}{{#ifeq $.direction "in"}}{{$.name}}: {{tsType $.type}}{{#unless @last}}, {{/unless}}{{/ifeq}}{{/each}}): Promise<{{outType arg}}> {
        return this.thisDBusInterface.{{$.name}}({{#each arg}}{{#ifeq $.direction "in"}}{{$.name}}{{#unless @last}}, {{/unless}}{{/ifeq}}{{/each}});
    }

    {{/each}}
}
{{#if signal.length}}
/***** Signals for {{$.name}} *****/
export declare interface {{className $.name}} {
    {{#each signal}}
    //@signal({ name: '{{$.name}}', signature: '{{signature arg}}' })
    on(evt: "{{$.name}}", cb: ({{#each arg}}{{$.name}}: {{tsType $.type}}{{#unless @last}}, {{/unless}}{{/each}}) => void): this;
    {{/each}}
    {{#if property}}on(evt: "PropertiesChanged", cb: (iface: string, changedProperties: {[key:string]: any}, invalidatedProperties: string[]) => void): this;{{/if}}
    on(event: string, listener: Function): this;
}{{/if}}

{{/each}}
